<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.StudentMapper">

    <!--声明此namespace开启Mybatis自带二级缓存
    <cache></cache>
    -->

    <!--声明此namespace开启EhCache二级缓存-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache">
        <!--property属性值可不设置，如果设置会覆盖ehcache.xml中的全局配置-->
        <property name="maxElementsInMemory" value="500"/>
        <property name="maxElementsOnDisk" value="100000"/>
    </cache>

    <!--SQL片段-->
    <sql id="sqlFragment">
        <where>
            <if test="list != null and list.size() > 0">
                <foreach collection="list" open=" and stuNo in (" close=")" item="stuNo" separator=",">
                    #{stuNo}
                </foreach>
            </if>
        </where>
    </sql>

    <select id="queryStudentByStuNo" resultType="Student" parameterType="int">
        select * from student where StuNo = #{StuNo};
    </select>

    <!--查询：使用类型转换器
        1. 如果类中属性和表中的字段类型能够合理识别（如String——VARCHAR），则可以使用resultType；否则使用resultMap
        2. 如果类中属性名和表中的字段名能够合理匹配（如stuNo——stuNo），则可以使用resultType；否则使用resultMap（如stuNo——id）
    -->
    <select id="queryStudentByStuNoWithConverter" resultMap="studentResult" parameterType="int">
        select * from student where StuNo = #{StuNo};
    </select>
    
    <resultMap id="studentResult" type="Student">
        <!--分为主键（id）和非主键（result）-->
        <id property="stuNo" column="stuNo"></id>
        <result property="stuName" column="stuName"></result>
        <result property="stuGender" column="stuGender" javaType="boolean" jdbcType="INTEGER"></result>
        <result property="stuAge" column="stuAge"></result>
        <result property="gradeName" column="gradeName"></result>
    </resultMap>

    <insert id="addStudent" parameterType="Student">
        insert into student(stuNo,stuName,stuAge,gradeName)
            values(#{stuNo},#{stuName},#{stuAge},#{gradeName});
    </insert>

    <insert id="addStudentWithConverter" parameterType="Student">
        insert into student(stuNo,stuName,stuGender,stuAge,gradeName)
            values(#{stuNo},#{stuName},#{stuGender,javaType=boolean,jdbcType=INTEGER},#{stuAge},#{gradeName});
    </insert>

    <delete id="deleteStudentByStuNo" parameterType="int">
        delete from student where stuNo = #{stuNo};
    </delete>

    <update id="updateStudentByStuNo" parameterType="Student">
        update student set stuName = #{stuName},stuAge = #{stuAge},
            gradeName = #{gradeName} where stuNo = #{stuNo};
    </update>

    <!--通过useCache声明该查询操作不使用二级缓存-->
    <select id="queryAllStudents" resultType="Student" useCache="false">
        select * from student;
    </select>

    <!--通过flushCache声明自动清理二级缓存-->
    <select id="queryAllStudentsOrderByColumn" parameterType="String" resultType="Student" flushCache="true">
        select * from student order by ${value};
    </select>

    <!--通过调用存储过程实现查询
        存储过程的输入参数，在MyBatis中一般用HashMap来传递
    -->
    <select id="queryCountByGradeNameWithProcedure" statementType="CALLABLE" parameterType="HashMap">
        call queryCountByGradeNameWithProcedure(#{gName,jdbcType=VARCHAR,mode=IN},
                                            #{scount,jdbcType=INTEGER,mode=OUT});
    </select>

    <!--动态SQL语句-->
    <!--
    <select id="queryStuByNameOrAgeWithSQLTag" parameterType="Student" resultType="Student">
        select * from student where 1 = 1
        <if test = "stuName != null and stuName != ''">
            and stuName = #{stuName}
        </if>
        <if test = "stuAge != 0">
            and stuAge = #{stuAge};
        </if>
    </select>
    -->

    <select id="queryStuByNameOrAgeWithSQLTag" parameterType="Student" resultType="Student">
        select * from student
        <where>
            <if test = "stuName != null and stuName != ''">
                and stuName = #{stuName}    <!--其中的and可以省略，因为<where>标签会智能增删and-->
            </if>
            <if test = "stuAge != 0">
                and stuAge = #{stuAge}; <!--其中的and不能省略，因为<where>标签只会智能处理第一个有效的<if>标签中的and-->
            </if>
        </where>
    </select>

    <!--将多个元素放入对象的属性中(StuNoListWrapper类的ArrayList<Integer>类型属性stuNoList)-->
    <select id="queryStuByStuNoListWithAttribute" parameterType="entity.StuNoListWrapper" resultType="Student">
        select * from student
        <where>
            <if test="stuNoList != null and stuNoList.size() > 0">
                <foreach collection="stuNoList" open=" and stuNo in (" close=")" item="stuNo" separator=",">
                    #{stuNo}
                </foreach>
            </if>
        </where>
    </select>

    <!--将多个元素放入数组中，int[] stuNoArray = {1,2,3}-->
    <select id="queryStuByStuNoListWithArray" parameterType="int[]" resultType="Student">
        select * from student
        <where>
            <if test="array != null and array.length > 0">
                <foreach collection="array" open=" and stuNo in (" close=")" item="stuNo" separator=",">
                    #{stuNo}
                </foreach>
            </if>
        </where>
    </select>

    <!--将多个元素放入数组中，List<Intetger> stuNoList-->
    <select id="queryStuByStuNoListWithList" parameterType="List" resultType="Student">
        select * from student
        <include refid="sqlFragment"></include>
    </select>

    <!--将多个元素放入对象数组中，Student[] students = {stu1, stu2, stu3}-->
    <select id="queryStuByStuNoListWithObjectArray" parameterType="Object[]" resultType="Student">
        select * from student
        <where>
            <if test="array != null and array.length > 0">
                <foreach collection="array" open=" and stuNo in (" close=")" item="student" separator=",">
                    #{student.stuNo}
                </foreach>
            </if>
        </where>
    </select>
    
    <select id="queryStuAndCard" parameterType="int" resultMap="student_card_map">
        select s.*, c.* from student s inner join studentCard c on s.cardId = c.cardId where s.stuNo = #{stuNo};
    </select>
    
    <resultMap id="student_card_map" type="Student">
        <!--学生的信息-->
        <id property="stuNo" column="stuNo"></id>
        <result property="stuName" column="stuName"></result>
        <result property="stuGender" column="stuGender" javaType="boolean" jdbcType="INTEGER"></result>
        <result property="stuAge" column="stuAge"></result>
        <result property="gradeName" column="gradeName"></result>
        <!--一对一时，对象成员使用association映射，JavaType指定该属性的类型-->
        <association property="stuCard" javaType="StudentCard">
            <id property="cardId" column="cardId"></id>
            <result property="cardInfo" column="cardInfo"></result>
        </association>
    </resultMap>

    <select id="queryAllStuInClass" parameterType="int" resultMap="student_class_map">
        select s.*,c.* from student s inner join studentClass c on s.classId = c.classId where c.classId = #{classId};
    </select>

    <!--类和表对应关系-->
    <resultMap id="student_class_map" type="entity.StudentClass">
        <!--因为type表示的主类是班级，因此先关联班级信息-->
        <id property="classId" column="classId"></id>
        <result property="className" column="className"></result>
        <!--一对多，配置成员属性：学生，描述属性类型：JavaType，描述属性的元素类型：ofType-->
        <collection property="students" ofType="Student">
            <id property="stuNo" column="stuNo"></id>
            <result property="stuName" column="stuName"></result>
            <result property="stuGender" column="stuGender" javaType="boolean" jdbcType="INTEGER"></result>
            <result property="stuAge" column="stuAge"></result>
            <result property="gradeName" column="gradeName"></result>
            <!--Student类中还有stuCard属性，可以级联对应，此处省略-->
        </collection>
    </resultMap>

    <!--查询所有学生，并延迟加载学生证信息-->
    <select id="lazyQueryAllStuAndCard" resultMap="student_card_lazyLoad_map">
        select * from student
    </select>

    <resultMap id="student_card_lazyLoad_map" type="Student">
        <!--学生信息-->
        <id property="stuNo" column="stuNo"></id>
        <result property="stuName" column="stuName"></result>
        <result property="stuGender" column="stuGender" javaType="boolean" jdbcType="INTEGER"></result>
        <result property="stuAge" column="stuAge"></result>
        <result property="gradeName" column="gradeName"></result>
        <!--采用延迟加载方式，在需要时加载学生证信息，column表示外键-->
        <association property="stuCard" javaType="StudentCard" select="entity.StudentCardMapper.queryCardById"
                     column="cardId"></association>
    </resultMap>
    
    <select id="queryStuByClassId" parameterType="int" resultType="Student">
        select * from student where classId = #{classId};
    </select>
    
</mapper>